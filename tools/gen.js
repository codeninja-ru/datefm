#!/usr/bin/env node
/**
 * generates index.ts for each folder and sub-folders
 * */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SRC_DIR = path.join(__dirname, '../src');

function getExportAsName(filename) {
    const name = path.parse(filename).name;
    return name.endsWith('_') ? name.substr(0, name.length - 1).toUpperCase() : name;
}

function isSourceFile(filepath) {
    const stat = fs.lstatSync(filepath);
    const name = path.parse(filepath).name;
    const ext = path.parse(filepath).ext;

    return stat.isFile() && ext == '.ts' && !name.endsWith('.test') && name != 'index';
}

function writeIndexFile(dirpath, exports) {
    if (exports) {
        const indexpath = path.join(dirpath, 'index.ts');
        //console.log(`writing ${indexpath}`);
        fs.writeFileSync(indexpath, [
            '// autogenerated, do not edit directly, use tools/gen.js (make index)',
            '',
            ...exports,
        ].join('\n'));
    }
}

function genIndexForLocaleDir(dirpath) {
    const exports = fs.readdirSync(dirpath)
             .map((filename) => {
                 const name = path.parse(filename).name;
                 const filepath = path.join(dirpath, filename);
                 if (isSourceFile(filepath)) {
                     const exportAs = getExportAsName(filename);
                     return `export { default as ${exportAs} } from './${name}';`;
                 }
             })
             .filter((str) => str)
             .flat();
    writeIndexFile(dirpath, exports);
}

function genExportForLocaleDir(dirpath) {
    const dirname = path.parse(dirpath).name;
    return fs.readdirSync(dirpath)
             .filter((filename) => isSourceFile(path.join(dirpath, filename)))
             .map(filename => {
                 const name = path.parse(filename).name;
                 const exportAs = getExportAsName(filename);
                 return `export { default as ${dirname}_${exportAs} } from './${dirname}/${name}';`;
             });
}

function genIndex(dirpath) {
    const exports = fs.readdirSync(dirpath)
             .map((filename) => {
                 const filepath = path.join(dirpath, filename);
                 const stat = fs.lstatSync(filepath);
                 const name = path.parse(filename).name;
                 const ext = path.parse(filename).ext;
                 if (isSourceFile(filepath)) {
                     const exportAs = getExportAsName(filename);
                     return `export { default as ${exportAs} } from './${name}';`;
                 } else if (stat.isDirectory()) {
                     console.log(`generating ${path.basename(dirpath)}/${filename}/index.ts`);
                     genIndexForLocaleDir(filepath);
                     return genExportForLocaleDir(filepath);
                 } else {
                     //console.warn(`skipping ${filename}`);
                 }
             })
             .filter((str) => str)
             .flat();
    writeIndexFile(dirpath, exports);
}

fs.readdirSync(SRC_DIR)
  .filter((filename) => {
      return fs.lstatSync(path.join(SRC_DIR, filename)).isDirectory();
  })
  .forEach((dirname) => {
      console.log(`generating ${dirname}/index.ts`);
      genIndex(path.join(SRC_DIR, dirname));
  });
